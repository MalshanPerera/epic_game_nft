[{"/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/index.js":"1","/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/App.js":"2","/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/Components/SelectCharacter/index.js":"3","/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/constants.js":"4","/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/Components/Arena/index.js":"5","/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/Components/LoadingIndicator/index.js":"6"},{"size":219,"mtime":1635611692696,"results":"7","hashOfConfig":"8"},{"size":4975,"mtime":1635616289168,"results":"9","hashOfConfig":"8"},{"size":4803,"mtime":1635616859746,"results":"10","hashOfConfig":"8"},{"size":407,"mtime":1635614503945,"results":"11","hashOfConfig":"8"},{"size":5178,"mtime":1635616885355,"results":"12","hashOfConfig":"8"},{"size":261,"mtime":1635616645877,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"w0lunz",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/index.js",[],["29","30"],"/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/App.js",[],"/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/Components/SelectCharacter/index.js",["31"],"import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      /*\n      * This is the big difference. Set our gameContract in state.\n      */\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n  \n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n  \n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n  \n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n  \n    /*\n     * Add a callback method that will fire when this event is received\n     */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n  \n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n  \n    if (gameContract) {\n      getCharacters();\n  \n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n  \n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  // Render Methods\n  const renderCharacters = () =>\n  characters.map((character, index) => (\n    <div className=\"character-item\" key={character.name}>\n      <div className=\"name-container\">\n        <p>{character.name}</p>\n      </div>\n      <img src={character.imageURI} alt={character.name} />\n      <button\n        type=\"button\"\n        className=\"character-mint-button\"\n        onClick={mintCharacterNFTAction(index)}\n      >{`Mint ${character.name}`}</button>\n    </div>\n  ));\n\n  // Actions\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        /*\n         * Show our loading indicator\n         */\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(mintTxn);\n        /*\n         * Hide our loading indicator when minting is finished\n         */\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      /*\n       * If there is a problem, hide the loading indicator as well\n       */\n      setMintingCharacter(false);\n    }\n  };\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\n\n\nexport default SelectCharacter;","/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/constants.js",[],"/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/Components/Arena/index.js",["32","33"],"import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\nimport './Arena.css';\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState('');\n  const [showToast, setShowToast] = useState(false);\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  // UseEffects\n  useEffect(() => {\n    const fetchBoss = async () => {\n        const bossTxn = await gameContract.getBigBoss();\n        console.log('Boss:', bossTxn);\n        setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n    * Setup logic when this event is fired off\n    */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n        const bossHp = newBossHp.toNumber();\n        const playerHp = newPlayerHp.toNumber();\n\n        console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n        /*\n        * Update both player and boss Hp\n        */\n        setBoss((prevState) => {\n            return { ...prevState, hp: bossHp };\n        });\n\n        setCharacterNFT((prevState) => {\n            return { ...prevState, hp: playerHp };\n        });\n    };\n\n    if (gameContract) {\n        fetchBoss();\n        gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    /*\n    * Make sure to clean up this event when this component is removed\n    */\n    return () => {\n        if (gameContract) {\n            gameContract.off('AttackComplete', onAttackComplete);\n        }\n    }\n  }, [gameContract]);\n\n  // Actions\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const txn = await gameContract.attackBoss();\n        await txn.wait();\n        console.log(txn);\n        setAttackState('hit');\n              \n        /*\n        * Set your toast state to true and then false 5 seconds later\n        */\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  };\n\n  return (\n    <div className=\"arena-container\">\n      {/* Add your toast HTML right here */}\n      {boss && (\n        <div id=\"toast\" className=\"show\">\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n  \n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {attackState === 'attacking' && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n  \n      {/* Character NFT */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n          </div> */}\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Arena;","/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/Components/LoadingIndicator/index.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":93,"column":6,"nodeType":"40","endLine":93,"endColumn":20,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":16,"column":10,"nodeType":"44","messageId":"45","endLine":16,"endColumn":19},{"ruleId":"38","severity":1,"message":"39","line":79,"column":6,"nodeType":"40","endLine":79,"endColumn":20,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCharacterNFT'. Either include it or remove the dependency array. If 'setCharacterNFT' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["49"],"no-unused-vars","'showToast' is assigned a value but never used.","Identifier","unusedVar",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},{"desc":"51","fix":"53"},"Update the dependencies array to be: [gameContract, setCharacterNFT]",{"range":"54","text":"55"},{"range":"56","text":"55"},[2788,2802],"[gameContract, setCharacterNFT]",[2207,2221]]