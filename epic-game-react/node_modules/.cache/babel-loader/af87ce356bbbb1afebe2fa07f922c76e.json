{"ast":null,"code":"var _jsxFileName = \"/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false); // UseEffect\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      /*\n      * This is the big difference. Set our gameContract in state.\n      */\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData));\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n    /*\n     * Add a callback method that will fire when this event is received\n     */\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`);\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n      /*\n       * Setup NFT Minted Listener\n       */\n\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]); // Render Methods\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this)); // Actions\n\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        /*\n         * Show our loading indicator\n         */\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(mintTxn);\n        /*\n         * Hide our loading indicator when minting is finished\n         */\n\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      /*\n       * If there is a problem, hide the loading indicator as well\n       */\n\n      setMintingCharacter(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mint Your Hero. Choose wisely.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectCharacter, \"YAIluGJumFDmJAPdOeDT94pTudM=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["/Users/malshanperera/Desktop/Malshan/buildspace/epic-game-web/buildspace-nft-game-starter/src/Components/SelectCharacter/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","console","log","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","error","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","on","off","renderCharacters","character","index","name","imageURI","mintCharacterNFTAction","characterId","mintTxn","mintCharacterNFT","wait","warn","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      /*\n      * This is the big difference. Set our gameContract in state.\n      */\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n  \n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n  \n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n  \n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n  \n    /*\n     * Add a callback method that will fire when this event is received\n     */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n  \n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n  \n    if (gameContract) {\n      getCharacters();\n  \n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n  \n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  // Render Methods\n  const renderCharacters = () =>\n  characters.map((character, index) => (\n    <div className=\"character-item\" key={character.name}>\n      <div className=\"name-container\">\n        <p>{character.name}</p>\n      </div>\n      <img src={character.imageURI} alt={character.name} />\n      <button\n        type=\"button\"\n        className=\"character-mint-button\"\n        onClick={mintCharacterNFTAction(index)}\n      >{`Mint ${character.name}`}</button>\n    </div>\n  ));\n\n  // Actions\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        /*\n         * Show our loading indicator\n         */\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(mintTxn);\n        /*\n         * Hide our loading indicator when minting is finished\n         */\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      /*\n       * If there is a problem, hide the loading indicator as well\n       */\n      setMintingCharacter(false);\n    }\n  };\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {/* Only show this when there are characters in state */}\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n    </div>\n  );\n};\n\n\n\nexport default SelectCharacter;"]},"metadata":{},"sourceType":"module"}